Question 1:                       parent
                                    |
				  child 1
				    |
				  child 2
                                    |
				  child 3
	So the for loop will run 3 times, and since the parent gets returned a
positive value, it breaks, and prints the printf. While that happens, the 
child created will run the for loop again, since it failed the if.
It continues to do this until it makes 3 children, or four generations
of processes. After each time a parent breaks, it prints out its PID
and its parents PID.

Question 2:                      parent
                            /   |       |   \
                       child1 child2 child3 child4
	So the for loop will run all four times without breaking,
because unless it fails the fork, fork should always return something greater
than 0. Only the child would produce a value of 0, which would break from the
loop, not allowing the children to fork again. So the parent forks 4 times
with each child printing its PID and the parent PID. 

Question 3:                     parent
                           /      |      \
                      child1    child2   child3
                       /  \       |    
                 child4 child5  child6
		  /
	      child7
When the parent gets forked, it creates an exact copy, which would have
the same index value as the parent. Which means that some of the children
would also create a child, because they were still on a low index when they
were created, so they would run again, creating more children. 
